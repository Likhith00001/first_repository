basiclly git is repository of new and old change .that can be reflacted after the period of time which created old version that can be taken back to the action.
then we can work in the community and change and recovere the work and store them as the repository
  


git --version
git init 'for using current repository as git repository(creates the .git hidden file in the local directory)
git status 'to check existing repository

ls 'to get details of list of all files
ls -la details of list

there is working directory we need change it to git directory by taking them to status bar by command

get add -A ' to change directory to git all
git add . ' to change directory to git directory without deleting file
git add -u ' to change directory to git directory without creating new file

git commit -m "version 1" 'for to see chamges detailes of commited change in the file

git commit -m "intial commit" 'the newly  added changes

 git config --global user.email "you@example.com" 'to add an user globely or local
 git config --global user.name "you" ' to name globle or local user

git log ' to see who logged in and changed the directory

git diff --staged filename 'to see complete changes in the file

git checkout filename ' for revert the change made before commit to the git
git checkout . ' for revert all file before commit to the git

git remote add origin url ' connect the github to local
git push -u origin master ' to push from local to github
git pull ' to pull the newlly created file from github to local working depository
git clone sshurl . ' to clone entire same thing and file and folder in local git repository

git rm filename 'will remove the fie from status bar before commit will remove the file from working directory

git branch ' after the commit completed will show the list of branches
first create repository and then again run the git remote add origin sshurl to connect new created branch on the github the push the files which commited 
git branch foldername ' will create the new branch on the working directory
git checkout foldername ' will change the branch on the working directory

git merge foldernmae ' to murge the branches
git branch -d foldername ' to delete branch in the local git
git push origin --delete foldername ' to delete branch in the github

touch filename ' will create file in the current repository
notepad filename 'to open the file in the required app
vim filename 'vim is a command to edit the file in the console of the git then to insert edit press i or a 		to save :w to quit :q to save and exit :x
 
creating .gitignore to ignore the uploading extions files which ignore the file while creating repository

GITHUB : github is a platform which provide repository based on git to commit the changes and provide

to create a SSH key 
run the command in bash:
 ssh-keygen -t ed25519 -C "likhith00001@gmail.com" 'enter ur email
 eval "$(ssh-agent -s)" 'to star the ssh agent in local agent
 ssh-add ~/.ssh/id_ed25519 'to add the id to the ssh agent
 clip < ~/.ssh/id_ed25519.pub 'to copy the ssh agent from agent to clipboard
 then add ssh key in the github space of ssh

for every time connecting the server to local git
git remote add origin url ' connect the github to local
git commit -u origin master ' push the changes in github host perticularlly

then start to commit changes from local to github
git push -u origin master ' to push from local to github
git commit -m "change file_name" ' to commit changes in directory of local host















Basic Git Commands
git init – Initialize a new Git repository
git clone [url] – Clone a repository from a remote source
git status – Show the status of changes as untracked, modified, or staged
git add [file] – Add a file to the staging area
git add . – Add all files to the staging area
git commit -m "[message]" – Commit changes with a message
git log – View commit history
git diff – Show changes between commits, commit and working tree, etc.
git branch – List, create, or delete branches
git checkout [branch|file] – Switch branches or restore working tree files
git merge [branch] – Merge a branch into the active branch
git pull – Fetch and integrate changes from the remote repository
git push – Push local commits to the remote repository
git remote – Manage set of tracked repositories
git fetch – Download objects and refs from another repository
Advanced/Other Useful Commands
git config – Configure Git settings
git reset [file|commit] – Unstage a file or reset commits
git rm [file] – Remove a file from the staging area and the working directory
git mv [file-original] [file-renamed] – Rename or move a file
git stash – Stash changes in a dirty working directory
git stash pop – Reapply stashed changes
git tag – Create, list, or delete tags
git show [commit|tag] – Show various types of objects
git cherry-pick [commit] – Apply the changes introduced by some existing commits
git rebase [branch] – Reapply commits on top of another base tip
git revert [commit] – Revert a commit by creating a new one
git archive – Create an archive of files from a named tree
git bisect – Use binary search to find the commit that introduced a bug
git blame [file] – Show what revision and author last modified each line of a file
This list covers the most commonly used Git commands, but there are many more! You can see the full set by running git help or reading the official Git documentation.

